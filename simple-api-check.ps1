#!/usr/bin/env pwsh
# Script simple pour v√©rifier le statut de l'API VEG'N BIO

Write-Host "üîç V√©rification simple de l'API VEG'N BIO" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green

$API_URL = "https://vegn-bio-backend.onrender.com"

Write-Host "`nüåê Test de connectivit√©..." -ForegroundColor Yellow

# Test simple avec curl
try {
    $response = curl -s -o $null -w "%{http_code}" $API_URL
    Write-Host "Status HTTP: $response" -ForegroundColor Cyan
    
    if ($response -eq "200") {
        Write-Host "‚úÖ API accessible et fonctionnelle" -ForegroundColor Green
    } elseif ($response -eq "403") {
        Write-Host "‚ö†Ô∏è API accessible mais retourne 403 (Forbidden)" -ForegroundColor Yellow
        Write-Host "Cela peut indiquer:" -ForegroundColor White
        Write-Host "  - L'application est en cours de d√©marrage" -ForegroundColor Gray
        Write-Host "  - Probl√®me de configuration de s√©curit√©" -ForegroundColor Gray
        Write-Host "  - Migration en cours d'ex√©cution" -ForegroundColor Gray
    } elseif ($response -eq "404") {
        Write-Host "‚ùå API non trouv√©e (404)" -ForegroundColor Red
    } else {
        Write-Host "‚ö†Ô∏è Status inattendu: $response" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Impossible de se connecter √† l'API" -ForegroundColor Red
    Write-Host "Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìã Solutions recommand√©es:" -ForegroundColor Yellow
Write-Host "1. Attendre 5-10 minutes pour que Render termine le d√©ploiement" -ForegroundColor White
Write-Host "2. V√©rifier le dashboard Render pour voir les logs" -ForegroundColor White
Write-Host "3. Si le probl√®me persiste, red√©marrer manuellement le service" -ForegroundColor White

Write-Host "`nüîó Liens utiles:" -ForegroundColor Cyan
Write-Host "- Dashboard Render: https://dashboard.render.com" -ForegroundColor White
Write-Host "- API Health: $API_URL/actuator/health" -ForegroundColor White
Write-Host "- API Docs: $API_URL/swagger-ui.html" -ForegroundColor White

Write-Host "`n‚è≥ Test dans 2 minutes..." -ForegroundColor Yellow
Start-Sleep -Seconds 120

Write-Host "`nüîÑ Nouveau test apr√®s attente..." -ForegroundColor Yellow
try {
    $response = curl -s -o $null -w "%{http_code}" $API_URL
    Write-Host "Nouveau status: $response" -ForegroundColor Cyan
    
    if ($response -eq "200") {
        Write-Host "‚úÖ API maintenant accessible !" -ForegroundColor Green
        
        # Test rapide des endpoints
        Write-Host "`nüß™ Test des endpoints..." -ForegroundColor Yellow
        try {
            $restaurants = Invoke-RestMethod -Uri "$API_URL/api/restaurants" -Method GET -TimeoutSec 10
            Write-Host "‚úÖ Restaurants: $($restaurants.Count) trouv√©s" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur restaurants: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        try {
            $menus = Invoke-RestMethod -Uri "$API_URL/api/menus" -Method GET -TimeoutSec 10
            Write-Host "‚úÖ Menus: $($menus.Count) trouv√©s" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur menus: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ö†Ô∏è API toujours non accessible (Status: $response)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors du nouveau test" -ForegroundColor Red
}
