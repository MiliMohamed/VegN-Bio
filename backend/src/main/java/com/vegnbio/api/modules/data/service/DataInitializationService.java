package com.vegnbio.api.modules.data.service;

import com.vegnbio.api.modules.auth.entity.User;
import com.vegnbio.api.modules.auth.repo.UserRepository;
import com.vegnbio.api.modules.restaurant.entity.Restaurant;
import com.vegnbio.api.modules.restaurant.repo.RestaurantRepository;
import com.vegnbio.api.modules.menu.entity.Menu;
import com.vegnbio.api.modules.menu.repo.MenuRepository;
import com.vegnbio.api.modules.menu.entity.MenuItem;
import com.vegnbio.api.modules.menu.repo.MenuItemRepository;
import com.vegnbio.api.modules.events.entity.Event;
import com.vegnbio.api.modules.events.repo.EventRepository;
import com.vegnbio.api.modules.reservation.entity.Reservation;
import com.vegnbio.api.modules.reservation.repo.ReservationRepository;
import com.vegnbio.api.modules.allergen.entity.Allergen;
import com.vegnbio.api.modules.allergen.repo.AllergenRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class DataInitializationService {

    private final UserRepository userRepository;
    private final RestaurantRepository restaurantRepository;
    private final MenuRepository menuRepository;
    private final MenuItemRepository menuItemRepository;
    private final EventRepository eventRepository;
    private final ReservationRepository reservationRepository;
    private final AllergenRepository allergenRepository;
    private final PasswordEncoder passwordEncoder;

    /**
     * Initialise toutes les donn√©es de base pour l'application
     */
    public void initializeAllData() {
        log.info("üöÄ D√©but de l'initialisation des donn√©es...");
        
        try {
            // 1. Cr√©er les allerg√®nes
            createAllergens();
            
            // 2. Cr√©er les utilisateurs
            createUsers();
            
            // 3. Cr√©er les restaurants
            createRestaurants();
            
            // 4. Cr√©er les menus
            createMenus();
            
            // 5. Cr√©er les plats
            createMenuItems();
            
            // 6. Cr√©er les √©v√©nements
            createEvents();
            
            // 7. Cr√©er les r√©servations
            createReservations();
            
            log.info("‚úÖ Initialisation des donn√©es termin√©e avec succ√®s !");
            
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'initialisation des donn√©es", e);
            throw new RuntimeException("Erreur lors de l'initialisation des donn√©es", e);
        }
    }

    /**
     * Cr√©e les allerg√®nes de base
     */
    private void createAllergens() {
        log.info("üìã Cr√©ation des allerg√®nes...");
        
        List<Allergen> allergens = Arrays.asList(
            Allergen.builder().code("GLUTEN").label("Gluten").build(),
            Allergen.builder().code("LACTOSE").label("Lactose").build(),
            Allergen.builder().code("NUTS").label("Fruits √† coque").build(),
            Allergen.builder().code("SOY").label("Soja").build(),
            Allergen.builder().code("SESAME").label("S√©same").build(),
            Allergen.builder().code("EGGS").label("≈íufs").build(),
            Allergen.builder().code("FISH").label("Poisson").build(),
            Allergen.builder().code("SHELLFISH").label("Crustac√©s").build()
        );
        
        allergenRepository.saveAll(allergens);
        log.info("‚úÖ {} allerg√®nes cr√©√©s", allergens.size());
    }

    /**
     * Cr√©e les utilisateurs de diff√©rents r√¥les
     */
    private void createUsers() {
        log.info("üë• Cr√©ation des utilisateurs...");
        
        List<User> users = Arrays.asList(
            // Administrateurs
            User.builder()
                .email("admin@vegnbio.fr")
                .passwordHash(passwordEncoder.encode("admin123"))
                .fullName("Administrateur Principal")
                .role(User.Role.ADMIN)
                .build(),
            
            User.builder()
                .email("admin2@vegnbio.fr")
                .passwordHash(passwordEncoder.encode("admin123"))
                .fullName("Marie Dubois")
                .role(User.Role.ADMIN)
                .build(),
            
            // Restaurateurs
            User.builder()
                .email("chef@bastille.vegnbio.fr")
                .passwordHash(passwordEncoder.encode("chef123"))
                .fullName("Jean-Pierre Martin")
                .role(User.Role.RESTAURATEUR)
                .build(),
            
            User.builder()
                .email("chef@republique.vegnbio.fr")
                .passwordHash(passwordEncoder.encode("chef123"))
                .fullName("Sophie Laurent")
                .role(User.Role.RESTAURATEUR)
                .build(),
            
            User.builder()
                .email("chef@nation.vegnbio.fr")
                .passwordHash(passwordEncoder.encode("chef123"))
                .fullName("Pierre Moreau")
                .role(User.Role.RESTAURATEUR)
                .build(),
            
            // Clients
            User.builder()
                .email("marie.dubois@email.com")
                .passwordHash(passwordEncoder.encode("client123"))
                .fullName("Marie Dubois")
                .role(User.Role.CLIENT)
                .build(),
            
            User.builder()
                .email("jean.martin@email.com")
                .passwordHash(passwordEncoder.encode("client123"))
                .fullName("Jean Martin")
                .role(User.Role.CLIENT)
                .build(),
            
            User.builder()
                .email("sophie.laurent@email.com")
                .passwordHash(passwordEncoder.encode("client123"))
                .fullName("Sophie Laurent")
                .role(User.Role.CLIENT)
                .build(),
            
            // Fournisseurs
            User.builder()
                .email("contact@biofrance.fr")
                .passwordHash(passwordEncoder.encode("fournisseur123"))
                .fullName("Bio France")
                .role(User.Role.FOURNISSEUR)
                .build(),
            
            User.builder()
                .email("contact@legumesbio.fr")
                .passwordHash(passwordEncoder.encode("fournisseur123"))
                .fullName("L√©gumes Bio Paris")
                .role(User.Role.FOURNISSEUR)
                .build()
        );
        
        userRepository.saveAll(users);
        log.info("‚úÖ {} utilisateurs cr√©√©s", users.size());
    }

    /**
     * Cr√©e les restaurants
     */
    private void createRestaurants() {
        log.info("üè™ Cr√©ation des restaurants...");
        
        List<Restaurant> restaurants = Arrays.asList(
            Restaurant.builder()
                .name("VEG'N BIO BASTILLE")
                .code("BAS")
                .address("Place de la Bastille")
                .city("Paris")
                .phone("01 43 25 67 89")
                .email("bastille@vegnbio.fr")
                .restaurantCapacity(80)
                .specialEvents("Notre restaurant phare situ√© sur la c√©l√®bre Place de la Bastille")
                .build(),
            
            Restaurant.builder()
                .name("VEG'N BIO R√âPUBLIQUE")
                .code("REP")
                .address("Place de la R√©publique")
                .city("Paris")
                .phone("01 43 25 67 90")
                .email("republique@vegnbio.fr")
                .restaurantCapacity(60)
                .specialEvents("Restaurant moderne au c≈ìur de la Place de la R√©publique")
                .build(),
            
            Restaurant.builder()
                .name("VEG'N BIO NATION")
                .code("NAT")
                .address("Place de la Nation")
                .city("Paris")
                .phone("01 43 25 67 91")
                .email("nation@vegnbio.fr")
                .restaurantCapacity(70)
                .specialEvents("Espace convivial sur la Place de la Nation")
                .build(),
            
            Restaurant.builder()
                .name("VEG'N BIO ITALIE")
                .code("ITA")
                .address("Place d'Italie")
                .city("Paris")
                .phone("01 43 25 67 92")
                .email("italie@vegnbio.fr")
                .restaurantCapacity(65)
                .specialEvents("Restaurant italien v√©g√©tarien sur la Place d'Italie")
                .build(),
            
            Restaurant.builder()
                .name("VEG'N BIO BOURSE")
                .code("BOU")
                .address("Place de la Bourse")
                .city("Paris")
                .phone("01 43 25 67 93")
                .email("bourse@vegnbio.fr")
                .restaurantCapacity(55)
                .specialEvents("Restaurant d'affaires pr√®s de la Place de la Bourse")
                .build()
        );
        
        restaurantRepository.saveAll(restaurants);
        log.info("‚úÖ {} restaurants cr√©√©s", restaurants.size());
    }

    /**
     * Cr√©e les menus pour chaque restaurant
     */
    private void createMenus() {
        log.info("üçΩÔ∏è Cr√©ation des menus...");
        
        List<Restaurant> restaurants = restaurantRepository.findAll();
        List<Menu> menus = new ArrayList<>();
        
        for (Restaurant restaurant : restaurants) {
            // Menu principal
            Menu menuPrincipal = Menu.builder()
                .restaurant(restaurant)
                .title("Menu Principal")
                .activeFrom(LocalDate.now())
                .activeTo(LocalDate.now().plusMonths(3))
                .build();
            
            // Menu du jour
            Menu menuDuJour = Menu.builder()
                .restaurant(restaurant)
                .title("Menu du Jour")
                .activeFrom(LocalDate.now())
                .activeTo(LocalDate.now().plusDays(7))
                .build();
            
            // Menu √©v√©nementiel
            Menu menuEvenementiel = Menu.builder()
                .restaurant(restaurant)
                .title("Menu √âv√©nementiel")
                .activeFrom(LocalDate.now())
                .activeTo(LocalDate.now().plusMonths(6))
                .build();
            
            menus.addAll(Arrays.asList(menuPrincipal, menuDuJour, menuEvenementiel));
        }
        
        menuRepository.saveAll(menus);
        log.info("‚úÖ {} menus cr√©√©s", menus.size());
    }

    /**
     * Cr√©e les plats pour chaque menu
     */
    private void createMenuItems() {
        log.info("ü•ó Cr√©ation des plats...");
        
        List<Menu> menus = menuRepository.findAll();
        List<Allergen> allergens = allergenRepository.findAll();
        
        // Plats v√©g√©tariens vari√©s
        String[][] platsData = {
            {"Burger V√©g√©tarien", "Burger aux l√©gumes grill√©s avec pain bio", "1290", "true"},
            {"Salade C√©sar V√©g√©tarienne", "Salade avec fromage v√©g√©tal et cro√ªtons", "890", "true"},
            {"Pizza Margherita", "Pizza tomate, mozzarella v√©g√©tale et basilic", "1190", "true"},
            {"Risotto aux Champignons", "Risotto cr√©meux aux champignons de Paris", "1390", "true"},
            {"Wrap Avocat", "Wrap aux l√©gumes frais et avocat", "990", "true"},
            {"Pasta Carbonara V√©g√©tarienne", "P√¢tes √† la cr√®me v√©g√©tale et champignons", "1290", "true"},
            {"Bowl Buddha", "Bowl de l√©gumes, quinoa et sauce tahini", "1190", "true"},
            {"Tartine Avocat", "Pain complet, avocat, tomates et graines", "790", "true"},
            {"Curry de L√©gumes", "Curry de l√©gumes avec riz basmati", "1390", "true"},
            {"Quiche Lorraine V√©g√©tarienne", "Quiche aux l√©gumes et fromage v√©g√©tal", "1090", "true"}
        };
        
        List<MenuItem> menuItems = new ArrayList<>();
        
        for (Menu menu : menus) {
            for (String[] plat : platsData) {
                MenuItem menuItem = MenuItem.builder()
                    .menu(menu)
                    .name(plat[0])
                    .description(plat[1])
                    .priceCents(Integer.parseInt(plat[2]))
                    .isVegan(Boolean.parseBoolean(plat[3]))
                    .allergens(Arrays.asList()) // Pas d'allerg√®nes par d√©faut
                    .build();
                
                menuItems.add(menuItem);
            }
        }
        
        menuItemRepository.saveAll(menuItems);
        log.info("‚úÖ {} plats cr√©√©s", menuItems.size());
    }

    /**
     * Cr√©e les √©v√©nements
     */
    private void createEvents() {
        log.info("üìÖ Cr√©ation des √©v√©nements...");
        
        List<Restaurant> restaurants = restaurantRepository.findAll();
        List<Event> events = new ArrayList<>();
        
        String[][] eventsData = {
            {"Atelier Cuisine V√©g√©tarienne", "Apprenez √† cuisiner des plats v√©g√©tariens d√©licieux", "2024-02-15T14:00", "2024-02-15T16:00", "25"},
            {"Conf√©rence Nutrition", "Les bienfaits de l'alimentation v√©g√©tarienne", "2024-02-20T18:00", "2024-02-20T20:00", "50"},
            {"D√©gustation Produits Bio", "D√©couvrez nos nouveaux produits biologiques", "2024-02-25T15:00", "2024-02-25T17:00", "30"},
            {"Soir√©e Producteurs", "Rencontrez nos producteurs locaux", "2024-03-01T19:00", "2024-03-01T21:00", "40"},
            {"Atelier P√¢tisserie V√©g√©tale", "Apprenez √† faire des desserts sans ≈ìufs", "2024-03-05T10:00", "2024-03-05T12:00", "20"}
        };
        
        for (Restaurant restaurant : restaurants) {
            for (String[] eventData : eventsData) {
                Event event = Event.builder()
                    .restaurant(restaurant)
                    .title(eventData[0])
                    .description(eventData[1])
                    .dateStart(LocalDateTime.parse(eventData[2]))
                    .dateEnd(LocalDateTime.parse(eventData[3]))
                    .capacity(Integer.parseInt(eventData[4]))
                    .build();
                
                events.add(event);
            }
        }
        
        eventRepository.saveAll(events);
        log.info("‚úÖ {} √©v√©nements cr√©√©s", events.size());
    }

    /**
     * Cr√©e les r√©servations
     */
    private void createReservations() {
        log.info("üìã Cr√©ation des r√©servations...");
        
        List<User> clients = userRepository.findByRole(User.Role.CLIENT);
        List<Restaurant> restaurants = restaurantRepository.findAll();
        List<Event> events = eventRepository.findAll();
        
        List<Reservation> reservations = new ArrayList<>();
        
        // R√©servations de tables
        for (int i = 0; i < 10; i++) {
            User client = clients.get(i % clients.size());
            Restaurant restaurant = restaurants.get(i % restaurants.size());
            
            Reservation reservation = Reservation.builder()
                .user(client)
                .restaurant(restaurant)
                .reservationDate(LocalDate.now().plusDays(i + 1))
                .reservationTime(LocalTime.of(12 + (i % 6), 0))
                .numberOfPeople(2 + (i % 4))
                .status(Reservation.ReservationStatus.CONFIRMED)
                .notes("R√©servation automatique")
                .build();
            
            reservations.add(reservation);
        }
        
        // R√©servations d'√©v√©nements
        for (int i = 0; i < 15; i++) {
            User client = clients.get(i % clients.size());
            Event event = events.get(i % events.size());
            
            Reservation reservation = Reservation.builder()
                .user(client)
                .restaurant(event.getRestaurant())
                .event(event)
                .reservationDate(event.getDateStart().toLocalDate())
                .reservationTime(event.getDateStart().toLocalTime())
                .numberOfPeople(1 + (i % 3))
                .status(Reservation.ReservationStatus.CONFIRMED)
                .notes("R√©servation √©v√©nement")
                .build();
            
            reservations.add(reservation);
        }
        
        reservationRepository.saveAll(reservations);
        log.info("‚úÖ {} r√©servations cr√©√©es", reservations.size());
    }

    /**
     * Nettoie toutes les donn√©es (pour les tests)
     */
    public void cleanAllData() {
        log.info("üßπ Nettoyage de toutes les donn√©es...");
        
        reservationRepository.deleteAll();
        eventRepository.deleteAll();
        menuItemRepository.deleteAll();
        menuRepository.deleteAll();
        restaurantRepository.deleteAll();
        userRepository.deleteAll();
        allergenRepository.deleteAll();
        
        log.info("‚úÖ Toutes les donn√©es ont √©t√© supprim√©es");
    }

    /**
     * V√©rifie si les donn√©es sont d√©j√† initialis√©es
     */
    public boolean isDataInitialized() {
        return userRepository.count() > 0 && restaurantRepository.count() > 0;
    }
}
