#!/usr/bin/env pwsh
# Script pour initialiser les donn√©es de l'application VegN Bio

Write-Host "üöÄ Script d'initialisation des donn√©es VegN Bio" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green

$API_URL = "https://vegn-bio-backend.onrender.com"
$ADMIN_USERNAME = "admin"
$ADMIN_PASSWORD = "admin123"

Write-Host "`nüåê Configuration:" -ForegroundColor Yellow
Write-Host "URL API: $API_URL" -ForegroundColor Cyan
Write-Host "Utilisateur Admin: $ADMIN_USERNAME" -ForegroundColor Cyan

# Fonction pour faire une requ√™te avec authentification
function Invoke-AuthenticatedRequest {
    param(
        [string]$Uri,
        [string]$Method = "GET",
        [hashtable]$Body = $null,
        [string]$ContentType = "application/json"
    )
    
    try {
        $headers = @{
            "Content-Type" = $ContentType
        }
        
        if ($Body) {
            $jsonBody = $Body | ConvertTo-Json -Depth 10
            return Invoke-RestMethod -Uri $Uri -Method $Method -Body $jsonBody -Headers $headers -TimeoutSec 30
        } else {
            return Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers -TimeoutSec 30
        }
    } catch {
        Write-Host "‚ùå Erreur lors de la requ√™te: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fonction pour se connecter et obtenir le token
function Get-AuthToken {
    try {
        Write-Host "`nüîê Connexion en tant qu'administrateur..." -ForegroundColor Yellow
        
        $loginData = @{
            username = $ADMIN_USERNAME
            password = $ADMIN_PASSWORD
        }
        
        $response = Invoke-AuthenticatedRequest -Uri "$API_URL/api/auth/login" -Method "POST" -Body $loginData
        
        if ($response -and $response.accessToken) {
            Write-Host "‚úÖ Connexion r√©ussie" -ForegroundColor Green
            return $response.accessToken
        } else {
            Write-Host "‚ùå √âchec de la connexion" -ForegroundColor Red
            return $null
        }
    } catch {
        Write-Host "‚ùå Erreur de connexion: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fonction pour v√©rifier le statut des donn√©es
function Get-DataStatus {
    param([string]$Token)
    
    try {
        Write-Host "`nüìä V√©rification du statut des donn√©es..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $Token"
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "$API_URL/api/v1/data/status" -Method "GET" -Headers $headers -TimeoutSec 15
        
        if ($response) {
            Write-Host "‚úÖ Statut r√©cup√©r√©" -ForegroundColor Green
            Write-Host "Initialis√©: $($response.initialized)" -ForegroundColor Cyan
            Write-Host "Message: $($response.message)" -ForegroundColor Cyan
            return $response.initialized
        }
    } catch {
        Write-Host "‚ùå Erreur lors de la v√©rification du statut: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour initialiser les donn√©es
function Initialize-Data {
    param([string]$Token)
    
    try {
        Write-Host "`nüöÄ Initialisation des donn√©es..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $Token"
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "$API_URL/api/v1/data/initialize" -Method "POST" -Headers $headers -TimeoutSec 60
        
        if ($response) {
            Write-Host "‚úÖ Initialisation termin√©e" -ForegroundColor Green
            Write-Host "Succ√®s: $($response.success)" -ForegroundColor Cyan
            Write-Host "Message: $($response.message)" -ForegroundColor Cyan
            
            if ($response.details) {
                Write-Host "`nüìã D√©tails de l'initialisation:" -ForegroundColor Yellow
                foreach ($detail in $response.details.PSObject.Properties) {
                    Write-Host "  - $($detail.Name): $($detail.Value)" -ForegroundColor White
                }
            }
            
            return $response.success
        }
    } catch {
        Write-Host "‚ùå Erreur lors de l'initialisation: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour r√©initialiser les donn√©es
function Reset-Data {
    param([string]$Token)
    
    try {
        Write-Host "`nüîÑ R√©initialisation des donn√©es..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $Token"
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "$API_URL/api/v1/data/reset" -Method "POST" -Headers $headers -TimeoutSec 60
        
        if ($response) {
            Write-Host "‚úÖ R√©initialisation termin√©e" -ForegroundColor Green
            Write-Host "Succ√®s: $($response.success)" -ForegroundColor Cyan
            Write-Host "Message: $($response.message)" -ForegroundColor Cyan
            return $response.success
        }
    } catch {
        Write-Host "‚ùå Erreur lors de la r√©initialisation: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour nettoyer les donn√©es
function Clean-Data {
    param([string]$Token)
    
    try {
        Write-Host "`nüßπ Nettoyage des donn√©es..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $Token"
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "$API_URL/api/v1/data/clean" -Method "DELETE" -Headers $headers -TimeoutSec 30
        
        if ($response) {
            Write-Host "‚úÖ Nettoyage termin√©" -ForegroundColor Green
            Write-Host "Succ√®s: $($response.success)" -ForegroundColor Cyan
            Write-Host "Message: $($response.message)" -ForegroundColor Cyan
            return $response.success
        }
    } catch {
        Write-Host "‚ùå Erreur lors du nettoyage: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction principale
function Main {
    Write-Host "`nüéØ D√©but du processus d'initialisation..." -ForegroundColor Green
    
    # 1. Obtenir le token d'authentification
    $token = Get-AuthToken
    if (-not $token) {
        Write-Host "‚ùå Impossible de se connecter. Arr√™t du script." -ForegroundColor Red
        return
    }
    
    # 2. V√©rifier le statut des donn√©es
    $isInitialized = Get-DataStatus -Token $token
    
    if ($isInitialized) {
        Write-Host "`n‚ö†Ô∏è  Les donn√©es sont d√©j√† initialis√©es." -ForegroundColor Yellow
        $choice = Read-Host "Voulez-vous les r√©initialiser ? (y/n)"
        
        if ($choice -eq "y" -or $choice -eq "Y") {
            $success = Reset-Data -Token $token
            if ($success) {
                Write-Host "`n‚úÖ Donn√©es r√©initialis√©es avec succ√®s !" -ForegroundColor Green
            } else {
                Write-Host "`n‚ùå √âchec de la r√©initialisation." -ForegroundColor Red
            }
        } else {
            Write-Host "`n‚úÖ Donn√©es d√©j√† initialis√©es. Aucune action n√©cessaire." -ForegroundColor Green
        }
    } else {
        Write-Host "`nüöÄ Initialisation des donn√©es..." -ForegroundColor Yellow
        $success = Initialize-Data -Token $token
        
        if ($success) {
            Write-Host "`n‚úÖ Donn√©es initialis√©es avec succ√®s !" -ForegroundColor Green
        } else {
            Write-Host "`n‚ùå √âchec de l'initialisation." -ForegroundColor Red
        }
    }
    
    Write-Host "`nüìä R√©sum√© des donn√©es cr√©√©es:" -ForegroundColor Yellow
    Write-Host "- üë• Utilisateurs: Admin, Restaurateurs, Clients, Fournisseurs" -ForegroundColor White
    Write-Host "- üè™ Restaurants: 5 restaurants VegN Bio" -ForegroundColor White
    Write-Host "- üçΩÔ∏è Menus: Menus principaux, du jour et √©v√©nementiels" -ForegroundColor White
    Write-Host "- ü•ó Plats: Plats v√©g√©tariens vari√©s" -ForegroundColor White
    Write-Host "- üìÖ √âv√©nements: Ateliers, conf√©rences, d√©gustations" -ForegroundColor White
    Write-Host "- üìã R√©servations: R√©servations de tables et d'√©v√©nements" -ForegroundColor White
    Write-Host "- üö´ Allerg√®nes: Liste compl√®te des allerg√®nes" -ForegroundColor White
    
    Write-Host "`nüéâ Processus termin√© !" -ForegroundColor Green
}

# Ex√©cution du script
Main
