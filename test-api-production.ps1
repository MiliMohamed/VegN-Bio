# Script de test pour v√©rifier l'API de production VegN-Bio
# Teste la connectivit√© et les fonctionnalit√©s principales

Write-Host "üîç Test de l'API de production VegN-Bio" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# Configuration
$API_BASE_URL = "https://vegn-bio-backend.onrender.com/api"
$BACKEND_URL = "https://vegn-bio-backend.onrender.com"

Write-Host "üåê URL du backend: $BACKEND_URL" -ForegroundColor Cyan
Write-Host "üîó URL de l'API: $API_BASE_URL" -ForegroundColor Cyan
Write-Host ""

# Test 1: V√©rification de la connectivit√© de base
Write-Host "üì° Test 1: Connectivit√© de base..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri $BACKEND_URL -Method GET -TimeoutSec 15
    Write-Host "‚úÖ Backend accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backend non accessible: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Code d'erreur: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
}

# Test 2: V√©rification de l'endpoint API
Write-Host ""
Write-Host "üîå Test 2: Endpoint API..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri $API_BASE_URL -Method GET -TimeoutSec 15
    Write-Host "‚úÖ Endpoint API accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Endpoint API non accessible: $($_.Exception.Message)" -ForegroundColor Yellow
    Write-Host "   Code d'erreur: $($_.Exception.Response.StatusCode)" -ForegroundColor Yellow
}

# Test 3: Test de connexion avec compte admin
Write-Host ""
Write-Host "üîê Test 3: Connexion admin..." -ForegroundColor Yellow
$adminLogin = @{
    email = "admin@vegnbio.com"
    password = "AdminVegN2024!"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$API_BASE_URL/auth/login" -Method POST -Body $adminLogin -ContentType "application/json" -TimeoutSec 15
    Write-Host "‚úÖ Connexion admin r√©ussie" -ForegroundColor Green
    Write-Host "   Token re√ßu: $($response.token.Substring(0, 20))..." -ForegroundColor Cyan
    $adminToken = $response.token
} catch {
    Write-Host "‚ùå √âchec de connexion admin: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Code d'erreur: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    $adminToken = $null
}

# Test 4: Test de connexion avec compte restaurateur
Write-Host ""
Write-Host "üè™ Test 4: Connexion restaurateur..." -ForegroundColor Yellow
$restaurateurLogin = @{
    email = "bastille@vegnbio.com"
    password = "Bastille2024!"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$API_BASE_URL/auth/login" -Method POST -Body $restaurateurLogin -ContentType "application/json" -TimeoutSec 15
    Write-Host "‚úÖ Connexion restaurateur r√©ussie" -ForegroundColor Green
    Write-Host "   Token re√ßu: $($response.token.Substring(0, 20))..." -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå √âchec de connexion restaurateur: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Code d'erreur: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
}

# Test 5: Test de connexion avec compte client
Write-Host ""
Write-Host "üë• Test 5: Connexion client..." -ForegroundColor Yellow
$clientLogin = @{
    email = "client1@example.com"
    password = "Client12024!"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$API_BASE_URL/auth/login" -Method POST -Body $clientLogin -ContentType "application/json" -TimeoutSec 15
    Write-Host "‚úÖ Connexion client r√©ussie" -ForegroundColor Green
    Write-Host "   Token re√ßu: $($response.token.Substring(0, 20))..." -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå √âchec de connexion client: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Code d'erreur: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
}

# Test 6: Test de r√©cup√©ration des utilisateurs (si admin connect√©)
if ($adminToken) {
    Write-Host ""
    Write-Host "üë• Test 6: R√©cup√©ration des utilisateurs..." -ForegroundColor Yellow
    $headers = @{
        "Authorization" = "Bearer $adminToken"
        "Content-Type" = "application/json"
    }
    
    try {
        $response = Invoke-RestMethod -Uri "$API_BASE_URL/users" -Method GET -Headers $headers -TimeoutSec 15
        $userCount = $response.Count
        Write-Host "‚úÖ Utilisateurs r√©cup√©r√©s: $userCount utilisateurs" -ForegroundColor Green
        
        # Compter par r√¥le
        $adminCount = ($response | Where-Object { $_.role -eq "ADMIN" }).Count
        $restaurateurCount = ($response | Where-Object { $_.role -eq "RESTAURATEUR" }).Count
        $fournisseurCount = ($response | Where-Object { $_.role -eq "FOURNISSEUR" }).Count
        $clientCount = ($response | Where-Object { $_.role -eq "CLIENT" }).Count
        
        Write-Host "   üìä R√©partition par r√¥le:" -ForegroundColor Cyan
        Write-Host "      - Administrateurs: $adminCount" -ForegroundColor White
        Write-Host "      - Restaurateurs: $restaurateurCount" -ForegroundColor White
        Write-Host "      - Fournisseurs: $fournisseurCount" -ForegroundColor White
        Write-Host "      - Clients: $clientCount" -ForegroundColor White
    } catch {
        Write-Host "‚ùå √âchec de r√©cup√©ration des utilisateurs: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 7: Test de r√©cup√©ration des restaurants
Write-Host ""
Write-Host "üè™ Test 7: R√©cup√©ration des restaurants..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE_URL/restaurants" -Method GET -TimeoutSec 15
    $restaurantCount = $response.Count
    Write-Host "‚úÖ Restaurants r√©cup√©r√©s: $restaurantCount restaurants" -ForegroundColor Green
    
    if ($restaurantCount -gt 0) {
        Write-Host "   üìã Liste des restaurants:" -ForegroundColor Cyan
        foreach ($restaurant in $response) {
            Write-Host "      - $($restaurant.name) ($($restaurant.code))" -ForegroundColor White
        }
    }
} catch {
    Write-Host "‚ùå √âchec de r√©cup√©ration des restaurants: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 8: Test de r√©cup√©ration des menus
Write-Host ""
Write-Host "üçΩÔ∏è Test 8: R√©cup√©ration des menus..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE_URL/menus" -Method GET -TimeoutSec 15
    $menuCount = $response.Count
    Write-Host "‚úÖ Menus r√©cup√©r√©s: $menuCount menus" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec de r√©cup√©ration des menus: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 9: Test de r√©cup√©ration des allerg√®nes
Write-Host ""
Write-Host "‚ö†Ô∏è Test 9: R√©cup√©ration des allerg√®nes..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE_URL/allergens" -Method GET -TimeoutSec 15
    $allergenCount = $response.Count
    Write-Host "‚úÖ Allerg√®nes r√©cup√©r√©s: $allergenCount allerg√®nes" -ForegroundColor Green
} catch {
    Write-Host "‚ùå √âchec de r√©cup√©ration des allerg√®nes: $($_.Exception.Message)" -ForegroundColor Red
}

# R√©sum√© des tests
Write-Host ""
Write-Host "üìä R√©sum√© des tests" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan
Write-Host "üåê Backend: $BACKEND_URL" -ForegroundColor White
Write-Host "üîó API: $API_BASE_URL" -ForegroundColor White
Write-Host "‚úÖ Tests de connectivit√©: Effectu√©s" -ForegroundColor Green
Write-Host "‚úÖ Tests d'authentification: Effectu√©s" -ForegroundColor Green
Write-Host "‚úÖ Tests des endpoints: Effectu√©s" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Tests termin√©s !" -ForegroundColor Green
Write-Host ""
Write-Host "üí° Si des tests ont √©chou√©:" -ForegroundColor Yellow
Write-Host "1. V√©rifiez que le backend est d√©ploy√© sur Render.com" -ForegroundColor White
Write-Host "2. V√©rifiez que les utilisateurs existent en base" -ForegroundColor White
Write-Host "3. V√©rifiez la connectivit√© r√©seau" -ForegroundColor White
Write-Host "4. Consultez les logs sur Render.com" -ForegroundColor White


