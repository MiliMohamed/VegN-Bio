#!/usr/bin/env pwsh
# Script simple pour initialiser les donn√©es en local

Write-Host "üöÄ Initialisation des donn√©es VegN Bio (Local)" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Green

$LOCAL_API_URL = "http://localhost:8080"
$ADMIN_USERNAME = "admin"
$ADMIN_PASSWORD = "admin123"

Write-Host "`nüåê Configuration locale:" -ForegroundColor Yellow
Write-Host "URL API: $LOCAL_API_URL" -ForegroundColor Cyan
Write-Host "Utilisateur Admin: $ADMIN_USERNAME" -ForegroundColor Cyan

# Fonction pour tester la connexion
function Test-Connection {
    try {
        Write-Host "`nüîç Test de connexion √† l'API..." -ForegroundColor Yellow
        $response = Invoke-RestMethod -Uri "$LOCAL_API_URL/actuator/health" -Method "GET" -TimeoutSec 10
        Write-Host "‚úÖ API accessible - Status: $($response.status)" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå API non accessible: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "üí° Assurez-vous que le backend est d√©marr√© sur le port 8080" -ForegroundColor Yellow
        return $false
    }
}

# Fonction pour se connecter
function Connect-Admin {
    try {
        Write-Host "`nüîê Connexion en tant qu'administrateur..." -ForegroundColor Yellow
        
        $loginData = @{
            username = $ADMIN_USERNAME
            password = $ADMIN_PASSWORD
        }
        
        $jsonBody = $loginData | ConvertTo-Json
        $response = Invoke-RestMethod -Uri "$LOCAL_API_URL/api/auth/login" -Method "POST" -Body $jsonBody -ContentType "application/json" -TimeoutSec 15
        
        if ($response -and $response.accessToken) {
            Write-Host "‚úÖ Connexion r√©ussie" -ForegroundColor Green
            return $response.accessToken
        } else {
            Write-Host "‚ùå √âchec de la connexion" -ForegroundColor Red
            return $null
        }
    } catch {
        Write-Host "‚ùå Erreur de connexion: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fonction pour initialiser les donn√©es
function Initialize-Data {
    param([string]$Token)
    
    try {
        Write-Host "`nüöÄ Initialisation des donn√©es..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $Token"
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "$LOCAL_API_URL/api/v1/data/initialize" -Method "POST" -Headers $headers -TimeoutSec 60
        
        if ($response) {
            Write-Host "‚úÖ Initialisation termin√©e" -ForegroundColor Green
            Write-Host "Succ√®s: $($response.success)" -ForegroundColor Cyan
            Write-Host "Message: $($response.message)" -ForegroundColor Cyan
            return $true
        }
    } catch {
        Write-Host "‚ùå Erreur lors de l'initialisation: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour v√©rifier le statut
function Check-Status {
    param([string]$Token)
    
    try {
        Write-Host "`nüìä V√©rification du statut..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $Token"
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "$LOCAL_API_URL/api/v1/data/status" -Method "GET" -Headers $headers -TimeoutSec 15
        
        if ($response) {
            Write-Host "‚úÖ Statut r√©cup√©r√©" -ForegroundColor Green
            Write-Host "Initialis√©: $($response.initialized)" -ForegroundColor Cyan
            Write-Host "Message: $($response.message)" -ForegroundColor Cyan
            return $response.initialized
        }
    } catch {
        Write-Host "‚ùå Erreur lors de la v√©rification: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction principale
function Main {
    # 1. Tester la connexion
    if (-not (Test-Connection)) {
        Write-Host "`n‚ùå Impossible de se connecter √† l'API. Arr√™t du script." -ForegroundColor Red
        Write-Host "üí° V√©rifiez que le backend est d√©marr√© avec: ./mvnw spring-boot:run" -ForegroundColor Yellow
        return
    }
    
    # 2. Se connecter
    $token = Connect-Admin
    if (-not $token) {
        Write-Host "`n‚ùå Impossible de se connecter. Arr√™t du script." -ForegroundColor Red
        return
    }
    
    # 3. V√©rifier le statut
    $isInitialized = Check-Status -Token $token
    
    if ($isInitialized) {
        Write-Host "`n‚ö†Ô∏è  Les donn√©es sont d√©j√† initialis√©es." -ForegroundColor Yellow
        $choice = Read-Host "Voulez-vous les r√©initialiser ? (y/n)"
        
        if ($choice -eq "y" -or $choice -eq "Y") {
            Write-Host "`nüîÑ R√©initialisation des donn√©es..." -ForegroundColor Yellow
            $headers = @{
                "Authorization" = "Bearer $token"
                "Content-Type" = "application/json"
            }
            
            try {
                $response = Invoke-RestMethod -Uri "$LOCAL_API_URL/api/v1/data/reset" -Method "POST" -Headers $headers -TimeoutSec 60
                Write-Host "‚úÖ R√©initialisation termin√©e" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå Erreur lors de la r√©initialisation: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    } else {
        # 4. Initialiser les donn√©es
        $success = Initialize-Data -Token $token
        
        if ($success) {
            Write-Host "`n‚úÖ Donn√©es initialis√©es avec succ√®s !" -ForegroundColor Green
        } else {
            Write-Host "`n‚ùå √âchec de l'initialisation." -ForegroundColor Red
        }
    }
    
    Write-Host "`nüìä Donn√©es cr√©√©es:" -ForegroundColor Yellow
    Write-Host "- üë• Utilisateurs: Admin, Restaurateurs, Clients, Fournisseurs" -ForegroundColor White
    Write-Host "- üè™ Restaurants: 5 restaurants VegN Bio" -ForegroundColor White
    Write-Host "- üçΩÔ∏è Menus: Menus principaux, du jour et √©v√©nementiels" -ForegroundColor White
    Write-Host "- ü•ó Plats: Plats v√©g√©tariens vari√©s" -ForegroundColor White
    Write-Host "- üìÖ √âv√©nements: Ateliers, conf√©rences, d√©gustations" -ForegroundColor White
    Write-Host "- üìã R√©servations: R√©servations de tables et d'√©v√©nements" -ForegroundColor White
    Write-Host "- üö´ Allerg√®nes: Liste compl√®te des allerg√®nes" -ForegroundColor White
    
    Write-Host "`nüéâ Processus termin√© !" -ForegroundColor Green
    Write-Host "`nüí° Vous pouvez maintenant:" -ForegroundColor Yellow
    Write-Host "- Se connecter avec admin/admin123" -ForegroundColor White
    Write-Host "- Se connecter avec chef_bastille/chef123" -ForegroundColor White
    Write-Host "- Se connecter avec client1/client123" -ForegroundColor White
    Write-Host "- Tester l'application avec des donn√©es compl√®tes" -ForegroundColor White
}

# Ex√©cution du script
Main
