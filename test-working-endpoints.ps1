#!/usr/bin/env pwsh

# Script pour tester les endpoints qui fonctionnent en production
Write-Host "=== Test des Endpoints Fonctionnels - Production ===" -ForegroundColor Green

$PROD_API_URL = "https://vegn-bio-backend.onrender.com"

Write-Host "`nüéØ === TEST DES ENDPOINTS FONCTIONNELS ===" -ForegroundColor Magenta

# Test 1: Endpoints qui fonctionnent
Write-Host "`n‚úÖ Test des endpoints accessibles..." -ForegroundColor Yellow

$workingEndpoints = @(
    @{ Path = "/swagger-ui/index.html"; Name = "Swagger UI Index" },
    @{ Path = "/v3/api-docs"; Name = "OpenAPI Documentation" }
)

foreach ($endpoint in $workingEndpoints) {
    try {
        Write-Host "üîç Test: $($endpoint.Name)" -ForegroundColor Cyan
        
        $response = Invoke-WebRequest -Uri "$PROD_API_URL$($endpoint.Path)" -Method GET -TimeoutSec 30 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        
        Write-Host "‚úÖ $($endpoint.Name) - Status: $($response.StatusCode)" -ForegroundColor Green
        
        # Analyser le contenu
        if ($response.Content) {
            $contentLength = $response.Content.Length
            Write-Host "   üìÑ Taille du contenu: $contentLength caract√®res" -ForegroundColor Cyan
            
            if ($endpoint.Path -eq "/v3/api-docs") {
                try {
                    $apiDocs = $response.Content | ConvertFrom-Json
                    Write-Host "   üìã Titre de l'API: $($apiDocs.info.title)" -ForegroundColor Cyan
                    Write-Host "   üìã Version: $($apiDocs.info.version)" -ForegroundColor Cyan
                    Write-Host "   üìã Serveurs disponibles: $($apiDocs.servers.Count)" -ForegroundColor Cyan
                    
                    # Lister les serveurs
                    foreach ($server in $apiDocs.servers) {
                        Write-Host "     - $($server.url)" -ForegroundColor Gray
                    }
                    
                } catch {
                    Write-Host "   ‚ö†Ô∏è Impossible de parser le JSON des API docs" -ForegroundColor Yellow
                }
            }
        }
        
    } catch {
        Write-Host "‚ùå $($endpoint.Name) - Erreur: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 2: Test des m√©thodes OPTIONS
Write-Host "`nüåê Test des m√©thodes OPTIONS..." -ForegroundColor Yellow

$optionsEndpoints = @(
    "/api/v1/restaurants",
    "/api/v1/allergens",
    "/api/v1/menus",
    "/api/v1/events",
    "/api/v1/auth/register",
    "/api/v1/auth/login"
)

foreach ($endpoint in $optionsEndpoints) {
    try {
        Write-Host "üîç Test OPTIONS: $endpoint" -ForegroundColor Cyan
        
        $response = Invoke-WebRequest -Uri "$PROD_API_URL$endpoint" -Method "OPTIONS" -TimeoutSec 30 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        
        Write-Host "‚úÖ OPTIONS $endpoint - Status: $($response.StatusCode)" -ForegroundColor Green
        
        # Analyser les headers CORS
        $corsHeaders = @(
            "Access-Control-Allow-Origin",
            "Access-Control-Allow-Methods",
            "Access-Control-Allow-Headers",
            "Access-Control-Allow-Credentials"
        )
        
        Write-Host "   üìã Headers CORS:" -ForegroundColor Cyan
        foreach ($header in $corsHeaders) {
            if ($response.Headers[$header]) {
                Write-Host "     $header`: $($response.Headers[$header])" -ForegroundColor Cyan
            }
        }
        
    } catch {
        Write-Host "‚ùå OPTIONS $endpoint - Erreur: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 3: Test de l'API docs pour r√©cup√©rer les endpoints disponibles
Write-Host "`nüìö Analyse de la documentation API..." -ForegroundColor Yellow

try {
    $apiDocsResponse = Invoke-WebRequest -Uri "$PROD_API_URL/v3/api-docs" -Method GET -TimeoutSec 30 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    
    if ($apiDocsResponse.StatusCode -eq 200) {
        $apiDocs = $apiDocsResponse.Content | ConvertFrom-Json
        
        Write-Host "‚úÖ Documentation API r√©cup√©r√©e" -ForegroundColor Green
        Write-Host "   üìã Titre: $($apiDocs.info.title)" -ForegroundColor Cyan
        Write-Host "   üìã Version: $($apiDocs.info.version)" -ForegroundColor Cyan
        Write-Host "   üìã Description: $($apiDocs.info.description)" -ForegroundColor Cyan
        
        # Lister les paths disponibles
        if ($apiDocs.paths) {
            Write-Host "`n   üìã Endpoints document√©s:" -ForegroundColor Cyan
            $pathCount = 0
            foreach ($path in $apiDocs.paths.PSObject.Properties) {
                $pathCount++
                Write-Host "     $($path.Name)" -ForegroundColor Gray
                if ($pathCount -ge 10) {
                    Write-Host "     ... et $($apiDocs.paths.PSObject.Properties.Count - 10) autres" -ForegroundColor Gray
                    break
                }
            }
        }
        
        # Lister les serveurs
        if ($apiDocs.servers) {
            Write-Host "`n   üìã Serveurs configur√©s:" -ForegroundColor Cyan
            foreach ($server in $apiDocs.servers) {
                Write-Host "     - $($server.url)" -ForegroundColor Gray
            }
        }
        
    }
    
} catch {
    Write-Host "‚ùå Impossible de r√©cup√©rer la documentation API" -ForegroundColor Red
}

# Test 4: Test de l'interface Swagger
Write-Host "`nüåê Test de l'interface Swagger..." -ForegroundColor Yellow

try {
    $swaggerResponse = Invoke-WebRequest -Uri "$PROD_API_URL/swagger-ui/index.html" -Method GET -TimeoutSec 30 -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    
    if ($swaggerResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Interface Swagger accessible" -ForegroundColor Green
        
        # V√©rifier si l'interface contient des informations utiles
        if ($swaggerResponse.Content -match "swagger") {
            Write-Host "   üìã Interface Swagger d√©tect√©e" -ForegroundColor Cyan
        }
        
        if ($swaggerResponse.Content -match "api-docs") {
            Write-Host "   üìã R√©f√©rence aux API docs d√©tect√©e" -ForegroundColor Cyan
        }
        
        Write-Host "   üîó URL d'acc√®s: $PROD_API_URL/swagger-ui/index.html" -ForegroundColor Cyan
        
    }
    
} catch {
    Write-Host "‚ùå Interface Swagger inaccessible" -ForegroundColor Red
}

# G√©n√©ration du rapport final
Write-Host "`nüìä === RAPPORT FINAL ===" -ForegroundColor Magenta

$finalReport = @{
    timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    api_url = $PROD_API_URL
    working_endpoints = @(
        "/swagger-ui/index.html",
        "/v3/api-docs"
    )
    working_methods = @("OPTIONS")
    blocked_methods = @("GET", "POST", "PUT", "DELETE", "PATCH", "HEAD")
    analysis = @{
        api_deployed = $true
        documentation_accessible = $true
        cors_configured = $true
        endpoints_blocked = $true
        security_restrictions = $true
    }
    recommendations = @(
        "L'API est d√©ploy√©e et accessible via la documentation",
        "Les restrictions de s√©curit√© bloquent l'acc√®s aux endpoints",
        "V√©rifier la configuration de s√©curit√© Spring Boot",
        "Examiner les logs de d√©ploiement Render",
        "Utiliser l'interface Swagger pour tester les endpoints"
    )
    next_steps = @(
        "Acc√©der √† $PROD_API_URL/swagger-ui/index.html pour tester l'API",
        "V√©rifier les variables d'environnement sur Render",
        "Contacter l'√©quipe DevOps pour les restrictions d'acc√®s",
        "Examiner la configuration de s√©curit√© en production"
    )
}

Write-Host "üéØ R√©sum√© de l'analyse:" -ForegroundColor Cyan
Write-Host "   ‚úÖ API d√©ploy√©e et accessible" -ForegroundColor Green
Write-Host "   ‚úÖ Documentation disponible" -ForegroundColor Green
Write-Host "   ‚úÖ CORS configur√©" -ForegroundColor Green
Write-Host "   ‚ùå Endpoints bloqu√©s par la s√©curit√©" -ForegroundColor Red
Write-Host "   ‚ùå Restrictions d'acc√®s strictes" -ForegroundColor Red

Write-Host "`nüí° Prochaines √©tapes:" -ForegroundColor Yellow
foreach ($step in $finalReport.next_steps) {
    Write-Host "   - $step" -ForegroundColor Yellow
}

# Sauvegarde du rapport final
$finalReport | ConvertTo-Json -Depth 3 | Out-File -FilePath "working-endpoints-report.json" -Encoding UTF8
Write-Host "`nüìÑ Rapport final sauvegard√©: working-endpoints-report.json" -ForegroundColor Cyan

Write-Host "`n=== ANALYSE TERMIN√âE ===" -ForegroundColor Green
Write-Host "üîó Acc√©dez √† l'interface Swagger: $PROD_API_URL/swagger-ui/index.html" -ForegroundColor Cyan
